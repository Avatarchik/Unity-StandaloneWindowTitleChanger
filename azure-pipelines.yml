trigger:
  - master
  - refs/tags/v*

jobs:
  - job: Windows
    dependsOn: macOS
    pool:
      vmImage: 'vs2017-win2016'
    steps:
      - powershell: Install-Module UnitySetup -Scope CurrentUser -Force
      - powershell: Install-UnitySetupInstance -Installers (Find-UnitySetupInstaller -Version 2017.4.33f1 -Components Windows) -Destination "$Env:USERPROFILE\Unity"
      - script: '"%USERPROFILE%\Unity\Editor\Unity.exe" -projectpath "%cd%" -logfile log.txt -serial "$(UNITY_SERIAL)" -username "$(UNITY_USERNAME)" -password "$(UNITY_PASSWORD)" -batchmode -quit'
      - script: type log.txt
        condition: always()
      - script: '"%USERPROFILE%\Unity\Editor\Unity.exe" -projectpath "%cd%" -logfile log.txt -serial "$(UNITY_SERIAL)" -username "$(UNITY_USERNAME)" -password "$(UNITY_PASSWORD)" -batchmode -runTests -testResults testResults.xml -testPlatform StandaloneWindows64'
      - script: type log.txt
        condition: always()
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'NUnit'
          testResultsFiles: 'testResults.xml'
          mergeTestResults: true
          failTaskOnFailedTests: true
          testRunTitle: 'Windows Test'
      - powershell: |
                $commit_hash = & git rev-parse HEAD
                $tag = & git name-rev --tags --name-only $commit_hash
                $match = (New-Object Regex("^v([0-9]+)\.([0-9]+)\.([0-9]+)$")).Matches($tag)
                if ($match[0].Groups.Count -eq 4) {
                    $version = $match[0].Groups[1].Value + "." + $match[0].Groups[2].Value + "." + $match[0].Groups[3].Value
                } else {
                    $version = "SNAPSHOT-" + $commit_hash
                }
                $cd = [System.IO.Directory]::GetCurrentDirectory()
                & "$Env:USERPROFILE\Unity\Editor\Unity.exe" -projectpath $cd -logfile log.txt -serial "$(UNITY_SERIAL)" -username "$(UNITY_USERNAME)" -password "$(UNITY_PASSWORD)" -batchmode -quit -exportPackage Assets/StandaloneWindowTitleChanger "$(Build.ArtifactStagingDirectory)\StandaloneWindowTitleChanger-$version.unitypackage"
      - script: type log.txt
        condition: always()
      - script: '"%USERPROFILE%\Unity\Editor\Unity.exe" -projectpath "%cd%" -logfile log.txt -serial "$(UNITY_SERIAL)" -username "$(UNITY_USERNAME)" -password "$(UNITY_PASSWORD)" -batchmode -quit -returnlicense'
        condition: always()
      - script: type log.txt
        condition: always()
      - task: PublishBuildArtifacts@1
        inputs:
          artifactName: UnityPackage

  - job: macOS
    pool:
      vmImage: 'macOS-10.14'
    dependsOn: macOSNative
    steps:
      - script: mkdir ~/.unitysetup
      - powershell: Install-Module UnitySetup -Scope CurrentUser -Force
      - powershell: Install-UnitySetupInstance -Installers (Find-UnitySetupInstaller -Version 2017.4.33f1 -Components Mac) -Destination "$Env:HOME/Unity"
      - script: |
                # Unity 2017 installation randomly forget adding executable permission to upm-macos and UnityShaderCompiler
                check_and_add_executable_permission() {
                  if [ ! -x "$1" ]; then
                    stat -x "$1"
                    sudo chmod a+x "$1" # owned by root
                  fi
                }
                check_and_add_executable_permission "$HOME/Unity/Unity.app/Contents/Resources/Upm/upm-macos"
                check_and_add_executable_permission "$HOME/Unity/Unity.app/Contents/Tools/UnityShaderCompiler"
      - script: $HOME/Unity/Unity.app/Contents/MacOS/Unity -projectpath $PWD -logfile -serial "$(UNITY_SERIAL)" -username "$(UNITY_USERNAME)" -password "$(UNITY_PASSWORD)" -batchmode -quit
      - script: $HOME/Unity/Unity.app/Contents/MacOS/Unity -projectpath $PWD -logfile -serial "$(UNITY_SERIAL)" -username "$(UNITY_USERNAME)" -password "$(UNITY_PASSWORD)" -batchmode -runTests -testResults testResults.xml -testPlatform StandaloneOSX
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'NUnit'
          testResultsFiles: 'testResults.xml'
          mergeTestResults: true
          failTaskOnFailedTests: true
          testRunTitle: 'macOS Test'
      - script: $HOME/Unity/Unity.app/Contents/MacOS/Unity -projectpath $PWD -logfile -serial "$(UNITY_SERIAL)" -username "$(UNITY_USERNAME)" -password "$(UNITY_PASSWORD)" -batchmode -quit -exportPackage Assets StandaloneWindowTitleChanger.MacBundleUpdated.unitypackage
      - script: $HOME/Unity/Unity.app/Contents/MacOS/Unity -projectpath $PWD -logfile -serial "$(UNITY_SERIAL)" -username "$(UNITY_USERNAME)" -password "$(UNITY_PASSWORD)" -batchmode -quit -returnlicense
        condition: always()

  - job: macOSNative
    pool:
      vmImage: 'macOS-10.14'
    steps:
      - script: sudo xcode-select --switch /Applications/Xcode_9.4.1.app
      - script: cd Assets/StandaloneWindowTitleChanger && make -f Makefile.macOS clean all
      - script: cp Assets/StandaloneWindowTitleChanger/Plugins/StandaloneWindowTitleChanger.bundle/Contents/MacOS/StandaloneWindowTitleChanger Assets/StandaloneWindowTitleChanger/Tests/Plugins/StandaloneWindowTitleChangerTests.bundle/Contents/MacOS/StandaloneWindowTitleChangerTests "$(Build.ArtifactStagingDirectory)"
      - task: PublishBuildArtifacts@1
        inputs:
          artifactName: macOSNativeBundle
